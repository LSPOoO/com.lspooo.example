apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion parent.ext.compileSdkVersion
    buildToolsVersion parent.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.lspooo.example"
        minSdkVersion parent.ext.minSdkVersion
        targetSdkVersion parent.ext.targetSdkVersion
        versionCode parent.ext.versionCode
        versionName parent.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi'
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            versionNameSuffix ".debug"
        }
        release {
            minifyEnabled false
            // 指定混淆规则，需要压缩优化的混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 指定打release包的签名
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"//越大越好
        incremental true
    }
    buildToolsVersion '26.0.2'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile project(':plugin_common')
    compile project(':plugin_statistics')
    compile project(':plugin_location')
    compile project(':plugin_camera')
    compile project(':plugin_share')
}

def propFile = file('./../signing.properties')
if (propFile.canRead()) {
    def Properties p = new Properties()
    p.load(new FileInputStream(propFile))

    if (p != null
            && p.containsKey('STORE_FILE')
            && p.containsKey('STORE_PASSWORD')
            && p.containsKey('KEY_ALIAS')
            && p.containsKey('KEY_PASSWORD')
    ) {
        println "RELEASE_BUILD: Signing..."

        android.signingConfigs.release.storeFile = file(p['STORE_FILE'])
        android.signingConfigs.release.storePassword = p['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = p['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = p['KEY_PASSWORD']

    } else {
        println "RELEASE_BUILD: Required properties in signing.properties are missing"
        android.buildTypes.release.signingConfig = null
    }
} else {
    println "RELEASE_BUILD: signing.properties not found"
    android.buildTypes.release.signingProperties = null
}

android.applicationVariants.all { variant ->
    // custom package name
    def apk = variant.outputs[0].outputFile;
    def versionName = android.defaultConfig.versionName;
    //def manifestParser = new DefaultManifestParser()
    //def versionName =manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
    def newName = "";
    if (variant.buildType.name == "release") {
        newName = apk.name.replace(".apk", "_LSPOoO_V" + versionName + "_release.apk");
    } else {
        newName = apk.name.replace(".apk", "_LSPOoO_V" + versionName + "_debug.apk");
    }
    newName = newName.replace("-" + variant.buildType.name, "");
    variant.outputs[0].outputFile = new File(apk.parentFile, newName);
    if (variant.outputs[0].zipAlign) {
        variant.outputs[0].zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
    }
}
