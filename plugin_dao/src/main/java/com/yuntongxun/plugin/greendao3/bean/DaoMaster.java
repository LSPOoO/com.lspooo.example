package com.yuntongxun.plugin.greendao3.bean;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.identityscope.IdentityScopeType;

import java.util.ArrayList;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 9;
    public static ArrayList<IDao> mList = new ArrayList<>();


    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(Database db, boolean ifNotExists) {
        for (IDao iDao : mList) {
            if (iDao != null) {
                iDao.onCreate(db, ifNotExists);
            }
        }
    }

    /**
     * 此方法用于修改表的结构
     *
     * @param db
     * @param oldVersion
     * @param newVersion
     */
    public static void upgradeTables(Database db, int oldVersion, int newVersion) {
        for (IDao iDao : mList) {
            if (iDao != null) {
                iDao.onUpgrade(db, oldVersion, newVersion);
            }
        }
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(Database db, boolean ifExists) {
        for (IDao iDao : mList) {
            if (iDao != null) {
                iDao.onDropTable(db, ifExists);
            }
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        for (IDao iDao : mList) {
            if (iDao != null) {
                for (Class<? extends AbstractDao<?, ?>> obj : iDao.getAbsDao()) {
                    registerDaoClass(obj);
                }
            }
        }
    }

    public DaoSession newSession() {
        return newSession(IdentityScopeType.Session);
    }

    public DaoSession newSession(IdentityScopeType type) {
        DaoSession session = new DaoSession(db);
        for (IDao iDao : mList) {
            if (iDao != null) {
                ISession se = iDao.getSession();
                se.init();
                session.initSession(db, type, daoConfigMap);
                session.setRegisterDaoListener(se);
                session.initDaoAndEntityClass();
            }
        }
        return session;
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }


    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            // 降低版本号 也算作是升级
            onUpgrade(wrap(db), oldVersion, newVersion);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            // upgradeTables(db,oldVersion,newVersion);
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
//            ToastUtil.showMessage("数据库已经升级,请重新登入.", Toast.LENGTH_LONG);

//            try {
//                SDKCoreHelper.logout();
//                ECPreferences.savePreference(ECPreferenceSettings.SETTINGS_REGIST_ISACTIVE, false, true);
//            } catch (InvalidClassException e) {
//                e.printStackTrace();
//            }
//            dropAllTables(db, true);
//            onCreate(db);
            upgradeTables(db,oldVersion,newVersion);
        }
    }

    public static void clearAllDao() {
        if (mList != null && mList.size() > 0) {
            mList.clear();
        }
    }

    public static void addDaoListener(IDao zDao) {
        if (mList.contains(zDao)) {
            return;
        }
        mList.add(zDao);
    }
}
